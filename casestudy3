  
Data Analysis Questions

--1 How many customers has Foodie-Fi ever had?

SELECT COUNT (DISTINCT customer_id )FROM foodie_fi.subscriptions;

--2 What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value

SELECT EXTRACT(month from start_date) AS months , COUNT(*)
FROM foodie_fi.subscriptions
JOIN foodie_fi.plans 
ON plans.plan_id = subscriptions.plan_id
WHERE plan_name= 'trial'
GROUP BY months
ORDER BY months;

--3 What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name

SELECT  plan_id , COUNT(*)
FROM foodie_fi.subscriptions
WHERE start_date > '  2020-01-01 '
GROUP BY  plan_id
ORDER BY plan_id ;

-- önce doğru tarihleri aldığından emin olmak için start_datelere de bak:
SELECT  plan_id ,,start_date COUNT(*)
FROM foodie_fi.subscriptions
WHERE start_date > '  2020-01-01 '
GROUP BY  plan_id,start_date
ORDER BY plan_id,start_date ;


--4 What is the customer count and percentage of customers who have churned rounded to 1 decimal place?
SELECT plan_id , COUNT(*) AS customer_count
FROM foodie_fi.subscriptions

--5 How many customers have churned straight after their initial free trial - what percentage is this rounded to the nearest whole number?

DROP TABLE IF EXISTS next_plan_cte ;
CREATE TEMP TABLE next_plan_cte AS (
 SELECT *, 
  LEAD(plan_id,1) OVER( PARTITION BY customer_id ORDER BY start_date)  AS next_plan
FROM foodie_fi.subscriptions ) ;
  
WITH direct_churner_cte AS (
  SELECT COUNT(DISTINCT customer_id) AS direct_churner
  FROM next_plan_cte
  WHERE plan_id = 0 AND next_plan = 4)
  
  SELECT direct_churner FROM  direct_churner_cte;

--6 What is the number and percentage of customer plans after their initial free trial?

What is the number and percentage of customer plans after their initial free trial?
DROP TABLE IF EXISTS current_plan_count;
CREATE TEMP TABLE current_plan_count AS (
    SELECT plan_id, COUNT(DISTINCT customer_id) AS num
    FROM foodie_fi.subscriptions
    GROUP BY plan_id
);

WITH conversions AS (
    SELECT next_plan, COUNT(*) AS total_conversions
    FROM next_plan_cte
    WHERE next_plan IS NOT NULL AND plan_id = 0
    GROUP BY next_plan
    ORDER BY next_plan
)

SELECT current_plan_count.plan_id, total_conversions, num,
        ROUND(CAST(total_conversions::FLOAT / num::FLOAT * 100 AS NUMERIC), 2) AS percent_directly_converted
FROM current_plan_count JOIN conversions
    ON current_plan_count.plan_id = conversions.next_plan;
    
    
    -- 7. What is the customer count and percentage breakdown of all 5 plan_name values at 2020-12-31?

WITH next_date_cte AS (
    SELECT *,
            LEAD (start_date, 1) OVER (PARTITION BY customer_id ORDER BY start_date) AS next_date
    FROM foodie_fi.subscriptions
),
customers_on_date_cte AS (
    SELECT plan_id, COUNT(DISTINCT customer_id) AS customers
    FROM next_date_cte
    WHERE (next_date IS NOT NULL AND ('2020-12-31'::DATE > start_date AND '2020-12-31'::DATE < next_date))
        OR (next_date IS NULL AND '2020-12-31'::DATE > start_date)
    GROUP BY plan_id
)

SELECT plan_id, customers, ROUND(CAST(customers::FLOAT / num::FLOAT * 100 AS NUMERIC), 2) AS percent
FROM customers_on_date_cte, total_count;
    
    -- 8. How many customers have upgraded to an annual plan in 2020?

SELECT COUNT(DISTINCT customer_id)
FROM next_plan_cte
WHERE next_plan=3 AND EXTRACT(YEAR FROM start_date) = '2020';

    
 --9 How many days on average does it take for a customer to an annual plan from the day they join Foodie-Fi?

WITH join_date AS( 
  SELECT customer_id, start_date
  FROM foodie_fi.subscriptions
  WHERE plan_id = 0),
  
upgrade_date AS (
  SELECT customer_id , start_date AS upgrade_date
  FROM foodie_fi.subscriptions
  WHERE plan_id = 3)
  
  
  SELECT ROUND ( AVG( upgrade_date - start_date), 2) AS avg_days_to_upgrade
  FROM join_date JOIN upgrade_date ON join_date.customer_id = upgrade_date.customer_id;
  
  --10 Can you further breakdown this average value into 30 day periods (i.e. 0-30 days, 31-60 days etc) 
  bins AS (
    SELECT* ,WIDTH_BUCKET(upgrade_date - start_date, 0, 360, 12) AS avg_days_to_upgrade
    FROM join_date JOIN upgrade_date
        ON join_date.customer_id = upgrade_date.customer_id
)

SELECT ((avg_days_to_upgrade )*30 || '-' || (avg_days_to_upgrade)*30) AS "30-day-range", COUNT(*)
FROM bins
GROUP BY avg_days_to_upgrade
ORDER BY avg_days_to_upgrade;

 --11 How many customers downgraded from a pro monthly to a basic monthly plan in 2020?

 DROP TABLE IF EXISTS next_plan_cte;
CREATE TEMP TABLE next_plan_cte AS(
    SELECT *, EXTRACT (years from start_date) AS year ,
        LEAD(plan_id, 1) 
        OVER(PARTITION BY customer_id ORDER BY start_date) as next_plan
    FROM foodie_fi.subscriptions
);

SELECT COUNT( DISTINCT customer_id) AS downgraded
FROM next_plan_cte
WHERE next_plan= 1 AND plan_id = 2 AND  year = 2020
group by customer_id,plan_id, next_plan;


