-- 1. What is the total amount each customer spent at the restaurant?
SELECT
 sales.customer_id ,SUM(menu.price )
 from dannys_diner.sales
 join dannys_diner.menu
 on sales.product_id = menu.product_id
 GROUP BY sales.customer_id;
 
-- 2. How many days has each customer visited the restaurant? 
 SELECT s.customer_id, COUNT(DISTINCT s.order_date) AS days_visited
 from dannys_diner.sales AS s
 GROUP BY customer_id
 ORDER BY customer_id;
 
 -- 3. What was the first item from the menu purchased by each customer?
-- her customerın orderlarını tarihe göre sıralayıp 1.nin product_nameini göstericez.

WITH AS cte_order ( SELECT s.customer_id, m.product_name, 
      ROW_NUMBER() OVER( PARTITION BY s.customer_id 
                                      ORDER BY s.order_date, s.product_id) AS row_number
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS  m
ON s.product_id = m.product_id ) 

SELECT * FROM cte_order 
WHERE row_number=1;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT   m.product_name, COUNT(s.product_id ) AS number_ofpurchase
FROM dannys_diner.menu AS m
JOIN dannys_diner.sales AS s
ON s.product_id = m.product_id
 GROUP BY m.product_name
 ORDER BY number_ofpurchase desc
 LIMIT 1;
 -- 5. Which item was the most popular for each customer?

WITH cte_order_rank AS
(
   SELECT s.customer_id, m.product_name, COUNT(s.product_id ) , m.product_id,
   DENSE_RANK() OVER( PARTITION BY s.customer_id ORDER BY COUNT(s.product_id ) DESC) AS  rank1
  FROM dannys_diner.menu AS m
  JOIN dannys_diner.sales AS s
  ON m.product_id = s.product_id 
  GROUP BY s.customer_id, m.product_id, product_name
)
  SELECT * FROM  cte_order_rank
  WHERE rank1 =1;
 -- Before answering question 6-10, I created a membership_validation table to validate only those customers joining in the membership program:

 DROP TABLE IF EXISTS membership_validation;
CREATE TEMP TABLE membership_validation AS
SELECT
   sales.customer_id,
   sales.order_date,
   menu.product_name,
   menu.price,
   members.join_date,
   CASE WHEN sales.order_date >= members.join_date
     THEN 'X'
     ELSE ''
     END AS membership
FROM dannys_diner.sales
 INNER JOIN dannys_diner.members 
   ON sales.customer_id = members.customer_id
 LEFT JOIN dannys_diner.menu
   ON sales.product_id = menu.product_id 
  WHERE join_date IS NOT NULL
  ORDER BY 
    customer_id,
    order_date;
     SELECT * FROM membership_validation;
     
 -- 6. Which item was purchased first by the customer after they became a member?
 

-- bu customer_idye göre değil genele bakarak ilk purcahse i gösterir
SELECT mv.order_date, mv.product_name , mv.customer_id
FROM membership_validation AS mv
WHERE  mv.membership = 'X'
ORDER BY mv.order_date
limit 1;


WITH cte_m AS (
  SELECT 
  mv.customer_id,  mv.order_date, mv.product_name, RANK() OVER( PARTITION BY  customer_id ORDER BY order_date ) AS rank2
FROM membership_validation AS mv
              WHERE membership = 'X' 
)
SELECT * FROM cte_m
WHERE rank2= 1;


